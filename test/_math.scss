// sass-lint:disable empty-args

@include describe('Math') {
    @include it('ig-math-pow') {
        @include assert-equal(ig-math-pow(2, 2),  2 * 2,       '2^2');
        @include assert-equal(ig-math-pow(2, 3),  2 * 2 * 2,   '2^3');
        @include assert-equal(ig-math-pow(4, 3),  4 * 4 * 4,   '4^3');
        @include assert-equal(ig-math-pow(3, -1), 1 / 3,       '3^(-1)');
        @include assert-equal(ig-math-pow(4, -2), 1 / (4 * 4), '4^(-2)');
        @include assert-equal(ig-math-pow(3, 0),  1,           '3^0');
    }

    @include it('ig-math-fact') {
        @include assert-equal(ig-math-fact(0), 1,   '0!');
        @include assert-equal(ig-math-fact(1), 1,   '1!');
        @include assert-equal(ig-math-fact(2), 2,   '2!');
        @include assert-equal(ig-math-fact(3), 6,   '3!');
        @include assert-equal(ig-math-fact(4), 24,  '4!');
        @include assert-equal(ig-math-fact(5), 120, '5!');
    }

    @include it('ig-math-pi') {
        @include assert-true(abs(3.14159265359 - ig-math-pi()) < 0.00000000001);
    }

    @include it('ig-math-rad') {
        @include assert-equal(ig-math-rad(360deg),       2 * ig-math-pi(),   '360°');
        @include assert-equal(ig-math-rad(270deg),       1.5 * ig-math-pi(), '270°');
        @include assert-equal(ig-math-rad(180deg),       ig-math-pi(),       '180°');
        @include assert-equal(ig-math-rad(90deg),        ig-math-pi() / 2,   '90°');
        @include assert-equal(ig-math-rad(0deg),         0,                  '0°');
        @include assert-equal(ig-math-rad(ig-math-pi()), ig-math-pi(),       'π');
        @include assert-equal(ig-math-rad(0),            0,                  '0');
        @include assert-equal(ig-math-rad(50),           50,                 '50');
    }

    @include it('ig-math-sin') {
        @include assert-true(abs(0  - ig-math-sin(-2 * ig-math-pi()))     < 0.001, 'sin(-2π)');
        @include assert-true(abs(1  - ig-math-sin(-3 * ig-math-pi() / 2)) < 0.001, 'sin(-3π / 2)');
        @include assert-true(abs(0  - ig-math-sin(-1 * ig-math-pi()))     < 0.001, 'sin(-π)');
        @include assert-true(abs(-1 - ig-math-sin(-1 * ig-math-pi() / 2)) < 0.001, 'sin(-π / 2)');
        @include assert-true(abs(0  - ig-math-sin(0))                     < 0.001, 'sin(0)');
        @include assert-true(abs(1  - ig-math-sin(ig-math-pi() / 2))      < 0.001, 'sin(π / 2)');
        @include assert-true(abs(0  - ig-math-sin(ig-math-pi()))          < 0.001, 'sin(π)');
        @include assert-true(abs(-1 - ig-math-sin(3 * ig-math-pi() / 2))  < 0.001, 'sin(3π / 2)');
        @include assert-true(abs(0  - ig-math-sin(2 * ig-math-pi()))      < 0.001, 'sin(2π)');
    }

    @include it('ig-math-cos') {
        @include assert-true(abs(1  - ig-math-cos(-2 * ig-math-pi()))     < 0.001, 'cos(-2π)');
        @include assert-true(abs(0  - ig-math-cos(-3 * ig-math-pi() / 2)) < 0.001, 'cos(-3π / 2)');
        @include assert-true(abs(-1 - ig-math-cos(-1 * ig-math-pi()))     < 0.001, 'cos(-π)');
        @include assert-true(abs(0  - ig-math-cos(-1 * ig-math-pi() / 2)) < 0.001, 'cos(-π / 2)');
        @include assert-true(abs(1  - ig-math-cos(0))                     < 0.001, 'cos(0)');
        @include assert-true(abs(0  - ig-math-cos(ig-math-pi() / 2))      < 0.001, 'cos(π / 2)');
        @include assert-true(abs(-1 - ig-math-cos(ig-math-pi()))          < 0.001, 'cos(π)');
        @include assert-true(abs(0  - ig-math-cos(3 * ig-math-pi() / 2))  < 0.001, 'cos(3π / 2)');
        @include assert-true(abs(1  - ig-math-cos(2 * ig-math-pi()))      < 0.001, 'cos(2π)');
    }

    @include it('ig-math-tan') {
        @include assert-true(abs(0  - ig-math-tan(-1 * ig-math-pi()))     < 0.001, 'tan(-π)');
        @include assert-true(abs(1  - ig-math-tan(-3 * ig-math-pi() / 4)) < 0.001, 'tan(-3π / 4)');
        @include assert-true(abs(-1 - ig-math-tan(-1 * ig-math-pi() / 4)) < 0.001, 'tan(-π / 4)');
        @include assert-true(abs(0  - ig-math-tan(0))                     < 0.001, 'tan(0)');
        @include assert-true(abs(1  - ig-math-tan(ig-math-pi() / 4))      < 0.001, 'tan(π / 4)');
        @include assert-true(abs(-1 - ig-math-tan(3 * ig-math-pi() / 4))  < 0.001, 'tan(3π / 4)');
        @include assert-true(abs(0  - ig-math-tan(ig-math-pi()))          < 0.001, 'tan(π)');
    }

    @include it('ig-math-clamp') {
        @include assert-equal(ig-math-clamp(0,  0, 10),    0,   '0 in [0, 10]');
        @include assert-equal(ig-math-clamp(10, 0, 10),    10,  '10 in [0, 10]');
        @include assert-equal(ig-math-clamp(20, 0, 10),    10,  '20 in [0, 10]');
        @include assert-equal(ig-math-clamp(3, 10, 20),    10,  '3 in [10, 20]');
        @include assert-equal(ig-math-clamp(-5, -30, -10), -10, '-5 in [-30, -10]');
        @include assert-equal(ig-math-clamp(-5, -30, -2),  -5,  '-5 in [-30, -2]');
    }
}
