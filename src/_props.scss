////
/// Property trees.
///
/// Property trees allow you to organize properties in a tree structure (internally nested maps).
/// The intended use is to store all your properties at the beginning and for the rest of the
/// stylesheet you just get them. There is no way to remove properties.
///
/// @group Property trees
///
/// @access public
////

///
/// Default tree name to use if no name is specified.
///
/// @type string
///
$ig-props-default-tree: 'default' !default;

///
/// List of all created property trees.
///
/// @type list
///
/// @access private
///
$ig-props-trees: ();

/// 
/// Save a new property tree.
///
/// @param {map}    $map                           - Map containing properties
/// @param {string} $tree [$ig-props-default-tree] - ID the map is saved as
///
/// @throw If a property name doesn't start with '--'
///
@mixin ig-props-set($map, $tree: $ig-props-default-tree) {
    $noop: ig-props-set($map, $tree);
}

/// 
/// Save a new property tree.
///
/// @param {map}    $map                           - Map containing properties
/// @param {string} $tree [$ig-props-default-tree] - ID the map is saved as
///
/// @throw If a property name doesn't start with '--'
///
@function ig-props-set($map, $tree: $ig-props-default-tree) {
    @each $key, $value in $map {
        @if str-slice($key, 1, 2) != '--' {
            @error 'Property names must start with "--".';
        }
    }

    $prop-map: null;

    @if map-has-key($ig-props-trees, $tree) {
        $map: ig-map-merge-recursive(map-get($ig-props-trees, $tree), $map);
    }

    $ig-props-trees: map-merge($ig-props-trees, ($tree: $map)) !global;

    @return null;
}

/// 
/// Unset a property tree.
///
/// @param {string} $tree [$ig-props-default-tree] - ID of the tree to be deleted
///
@mixin ig-props-unset($tree: $ig-props-default-tree) {
    $noop: ig-props-set($tree);
}

/// 
/// Unset a property tree.
///
/// @param {string} $tree [$ig-props-default-tree] - ID of the tree to be deleted
///
/// @throw If the property tree does not exist
///
@function ig-props-unset($tree: $ig-props-default-tree) {
    @if not map-has-key($ig-props-trees, $tree) {
        @error 'Property tree "#{inspect($tree)}" does not exist.';
    }

    $ig-props-trees: map-remove($ig-props-trees, $tree) !global;

    @return null;
}

/// 
/// Read a value from a property tree.
///
/// @param {string | list} $key                              - Key of the property to read. If this is a list of keys, the map will be traversed in that order.
/// @param {string}        $tree    [$ig-props-default-tree] - ID of the property map to use
/// @param {any}           $default [null]                   - Default value to return of no match was found. If null, this function will throw an error instead.
///
/// @return {any} Value assigned to property or $default
///
/// @throw If there is no tree with the given ID
/// @throw If there was no match for $key and $default is null
///
@function ig-props-get($key, $tree: $ig-props-default-tree, $default: null) {
    @if not map-has-key($ig-props-trees, $tree) {
        @error 'Unknown tree "#{$tree}".';
    }

    $prop-map:   map-get($ig-props-trees, $tree);
    $prop-value: null;

    @if type-of($key) == list {
        $prop-value: $prop-map;

        @each $k in $key {
            $prop-value: map-get($prop-value, $k);

            @if $prop-value == null {
                @if $default == null {
                    @error '"#{$key}" is null.';
                } @else {
                    @return $default;
                }
            }
        }
    } @else {
        $prop-value: map-get($prop-map, $key);

        @if $prop-value == null {
            @if $default == null {
                @error '"#{$key}" is null.';
            } @else {
                @return $default;
            }
        }
    }

    @return $prop-value;
}
