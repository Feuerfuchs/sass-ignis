////
/// Property trees.
///
/// Property trees allow you to organize properties in a tree structure (internally nested maps).
/// The intended use is to store all your properties at the beginning and for the rest of the
/// stylesheet you just get them.
///
/// @group Property trees
///
/// @access public
////

///
/// Indicate if property names must start with two dashes (--).
/// This is required if property trees are also used for native CSS custom properties.
///
/// @type bool
///
$ig-props-enforce-double-dashes: true !default;

///
/// Default tree name to use if no name is specified.
///
/// @type string
///
$ig-props-default-tree: 'default' !default;

///
/// List of all created property trees.
///
/// @type list
///
/// @access private
///
$ig-props-trees: ();

/// 
/// Save a property tree. If a tree with the sane name already exists, the trees
/// will be merged.
///
/// @param {map}    $map                            - Map containing properties
/// @param {string} $tree  [$ig-props-default-tree] - ID the map is saved as
/// @param {bool}   $merge [false]                  - If a tree named $tree already exists and this value is set to true, they will be merged. Otherwise an error will be emitted.
///
@mixin ig-props-save($map, $tree: $ig-props-default-tree, $merge: false) {
    $noop: ig-props-save($map, $tree, $merge);
}

/// 
/// Save a property tree. If a tree with the sane name already exists, the trees
/// will be merged.
///
/// @param {map}    $map                            - Map containing properties
/// @param {string} $tree  [$ig-props-default-tree] - ID the map is saved as
/// @param {bool}   $merge [false]                  - If a tree named $tree already exists and this value is set to true, they will be merged. Otherwise an error will be emitted.
///
@function ig-props-save($map, $tree: $ig-props-default-tree, $merge: false) {
    $prop-map: null;

    @if $ig-props-enforce-double-dashes {
        @if not ig-props-validate($map) {
            @error 'Property tree keys must start with two dashes (--). If you don\'t use property trees for native CSS custom properties, set $ig-props-enforce-double-dashes to false.';
        }
    }

    @if map-has-key($ig-props-trees, $tree) {
        @if $merge {
            $map: ig-map-merge-recursive(map-get($ig-props-trees, $tree), $map);
        } @else {
            @error 'Property tree #{inspect($tree)} does already exist.';
        }
    }

    $ig-props-trees: map-merge($ig-props-trees, ($tree: $map)) !global;

    @return null;
}

/// 
/// Delete a property tree.
///
/// @param {string} $tree [$ig-props-default-tree] - ID of the tree to be deleted
///
@mixin ig-props-delete($tree: $ig-props-default-tree) {
    $noop: ig-props-delete($tree);
}

/// 
/// Unset a property tree.
///
/// @param {string} $tree [$ig-props-default-tree] - ID of the tree to be deleted
///
/// @throw If the property tree does not exist
///
@function ig-props-delete($tree: $ig-props-default-tree) {
    @if not map-has-key($ig-props-trees, $tree) {
        @error 'Property tree "#{inspect($tree)}" does not exist.';
    }

    $ig-props-trees: map-remove($ig-props-trees, $tree) !global;

    @return null;
}

/// 
/// Get an entire property tree.
///
/// @param {string} $tree [$ig-props-default-tree] - ID of the property tree
///
/// @return {map}
///
/// @throw If there is no tree with the given ID
///
@function ig-props-get-all($tree: $ig-props-default-tree) {
    @if not map-has-key($ig-props-trees, $tree) {
        @error 'Unknown tree "#{$tree}".';
    }

    @return map-get($ig-props-trees, $tree);
}

/// 
/// Read a value from a property tree.
///
/// @param {string | list} $key                              - Key of the property to read. If this is a list of keys, the map will be traversed in that order.
/// @param {string}        $tree    [$ig-props-default-tree] - ID of the property tree to use
/// @param {any}           $default [null]                   - Default value to return of no match was found. If null, this function will throw an error instead.
///
/// @return {any} Value assigned to property or $default
///
/// @throw If there was no match for $key and $default is null
///
@function ig-props-get($key, $tree: $ig-props-default-tree, $default: null) {
    $prop-map:   ig-props-get-all($tree);
    $prop-value: ig-map-get-deep($prop-map, $key, $default);

    @if $prop-value == null {
        @error '"#{$key}" is null.';
    }

    @return $prop-value;
}

/// 
/// Generate a var() function call to get native CSS custom property.
///
/// @param {string | list} $key            - Key of the property to read. If this is a list of keys, the map will be traversed in that order.
/// @param {string | null} $tree    [null] - Optional tree to check if the property actually exists.
/// @param {any}           $default [null] - Default value to return of no match was found.
///
/// @return {string} var()
///
@function ig-props-get-native($key, $tree: null, $default: null) {
    @if $tree != null {
        $noop: ig-props-get($key, $tree, $default);
    }

    $native-var: '';

    @if type-of($key) == list {
        @each $subkey in $key {
            $native-var: $native-var + $subkey;
        }
    } @else {
        $native-var: $key;
    }

    @if $default == null {
        @return var(#{$native-var});
    } @else {
        @return var(#{$native-var}, #{$default});
    }
}

/// 
/// Generate assignments for native CSS custom properties with the values from the specified tree.
///
/// @param {string} $tree [$ig-props-default-tree] - ID of the property tree to use
/// @param {string} $root [null]                   - Sub-tree to use for assignment
///
@mixin ig-props-assign-native($tree: $ig-props-default-tree, $root: null) {
    $map: null;

    @if $root == null {
        $map: ig-props-get-all($tree);
    } @else {
        $map: ig-props-get($root, $tree);
    }

    @include ig-props-assign-native-internal($map);
}

///
/// @access private
///
@mixin ig-props-assign-native-internal($map, $prefix: '') {
    @each $key, $value in $map {
        @if type-of($value) != map {
            #{$prefix + $key}: #{$value};
        } @else {
            @include ig-props-assign-native-internal($value, $prefix + $key);
        }
    }
}

/// 
/// Validate property names.
///
/// @access private
///
@function ig-props-validate($map) {
    @each $key, $value in $map {
        @if str-index($key, '--') != 1 {
            @return false;
        }

        @if type-of($value) == map {
            @if not ig-props-validate($value) {
                @return false;
            }
        }
    }

    @return true;
}
