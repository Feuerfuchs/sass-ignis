////
/// Easing.
///
/// A collection of easing functions which are commonly used for animations.
/// This code is based on https://github.com/gre/bezier-easing.
///
/// @group Easing
///
/// @access public
////

///
/// @access private
///
$ig-cubic-bezier-sample-pool: ();

///
/// Sample pool size for cubic bezier calculations.
///
$ig-cubic-bezier-sample-pool-size: 10 !default;

///
/// Minimum slope required to use the Newton-Raphson method for cubic bezier calculations.
///
$ig-cubic-bezier-newton-min-slope: 0.001 !default;

///
/// Number of iterations of the Newton-Raphson method.
///
$ig-cubic-bezier-newton-iters: 4 !default;

///
/// Precision of the subdivision method for cubic bezier calculations.
///
$ig-cubic-bezier-subdiv-precision: 0.0000001 !default;

///
/// Maximum iterations of the subdivision method for cubic bezier calculations.
///
$ig-cubic-bezier-subdiv-max-iters: 10 !default;

///
/// A steps function identical to the CSS steps function.
///
/// @param {number} $n        - Number of steps
/// @param {string} $behavior - One of these: jump-none, jump-both, jump-start, jump-end
///
/// @return {number}
///
@function ig-steps($n, $behavior, $t) {
    @if $behavior == jump-start {
        $s: 1 / $n;
        @return if($t == 0, $s, ceil($t / $s) * $s);
    } @else if $behavior == jump-end {
        $s: 1 / $n;
        @return if($t == 1, 1 - $s, floor($t / $s) * $s);
    } @else if $behavior == jump-both {
        $sx: 1 / $n;
        $sy: 1 / ($n + 1);
        @return if($t == 0, $sy, ceil($t / $sx) * $sy);
    } @else if $behavior == jump-none {
        $sx: 1 / $n;
        $sy: 1 / ($n - 1);
        @return if($t == 1, 1, floor($t / $sx) * $sy);
    } @else {
        @error 'Invalid $behavior: #{inspect($behavior)}';
    }
}

///
/// A cubic bezier function identical to the CSS cubic-bezier function.
///
/// @param {number} $x1 - X of first point
/// @param {number} $y1 - Y of first point
/// @param {number} $x2 - X of second point
/// @param {number} $y2 - Y of second point
/// @param {number} $x  - Progress between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-cubic-bezier($x1, $y1, $x2, $y2, $x) {
    //
    // Cover simple cases
    //

    @if ($x1 == $y1) and ($x2 == $y2) {
        @return $x;
    }
    @if $x == 0 {
        @return 0;
    }
    @if $x == 1 {
        @return 1;
    }

    //
    // Generate samples
    //

    $sample-pool-key: $x1 + '_' + $x2;

    @if not map-has-key($ig-cubic-bezier-sample-pool, $sample-pool-key) {
        $samples: ();

        @for $i from 0 through $ig-cubic-bezier-sample-pool-size {
            $samples: append($samples, ig-cubic-bezier-func($x1, $x2, $i / $ig-cubic-bezier-sample-pool-size));
        }

        $ig-cubic-bezier-sample-pool: map-merge($ig-cubic-bezier-sample-pool, ($sample-pool-key: $samples)) !global;
    }

    //
    // Calculate cubic bezier
    //

    @return ig-cubic-bezier-func($y1, $y2, ig-cubic-bezier-t-for-x($x1, $x2, $x));
}

///
/// @access private
///
@function ig-cubic-bezier-func-a($p1, $p2) {
    @return 1 - 3 * $p2 +  3 * $p1;
}

///
/// @access private
///
@function ig-cubic-bezier-func-b($p1, $p2) {
    @return 3 * $p2 - 6 * $p1;
}

///
/// @access private
///
@function ig-cubic-bezier-func-c($p1) {
    @return 3 * $p1;
}

///
/// One-dimensional cubic bezier function.
///
/// @access private
///
@function ig-cubic-bezier-func($p1, $p2, $t) {
    @return ((ig-cubic-bezier-func-a($p1, $p2) * $t + ig-cubic-bezier-func-b($p1, $p2)) * $t + ig-cubic-bezier-func-c($p1)) * $t;
}

///
/// Derivative of the one-dimensional cubic bezier function.
///
/// @access private
///
@function ig-cubic-bezier-func-slope($p1, $p2, $t) {
    @return 3 * ig-cubic-bezier-func-a($p1, $p2) * $t * $t + 2 * ig-cubic-bezier-func-b($p1, $p2) * $t + ig-cubic-bezier-func-c($p1);
}

///
/// Newton-Raphson method to calculate the t parameter for a given x parameter.
///
/// @access private
///
@function ig-cubic-bezier-newton-raphson($x1, $x2, $x, $t) {
    @for $i from 1 through $ig-cubic-bezier-newton-iters {
        $cur-slope: ig-cubic-bezier-func-slope($x1, $x2, $t);

        @if $cur-slope == 0 {
            @return $t;
        }

        $cur-x: ig-cubic-bezier-func($x1, $x2, $t) - $x;
        $t:     $t - $cur-x / $cur-slope;
    }

    @return $t;
}

///
/// Subdivision method to calculate the t parameter for a given x parameter.
///
/// @access private
///
@function ig-cubic-bezier-binary-subdivide($x1, $x2, $x, $a, $b) {
    $cur-x: 0;
    $cur-t: 0;
    $i:     0;

    @while $i < $ig-cubic-bezier-subdiv-max-iters {
        $cur-t: $a + ($b - $a) / 2;
        $cur-x: ig-cubic-bezier-func($x1, $x2, $cur-t) - $x;

        @if $cur-x > 0 {
            $b: $cur-t;
        } @else {
            $a: $cur-t;
        }

        @if abs($cur-x) < $ig-cubic-bezier-subdiv-precision {
            @return $cur-t;
        }
    }

    @return $cur-t;
}

///
/// Calculate the t parameter for a given x parameter.
///
/// @access private
///
@function ig-cubic-bezier-t-for-x($x1, $x2, $x) {
    $sample-pool-key: $x1 + '_' + $x2;
    $samples:         map-get($ig-cubic-bezier-sample-pool, $sample-pool-key);

    $intv-start:  0;
    $cur-sample:  1;
    $last-sample: $ig-cubic-bezier-sample-pool-size;

    @while ($cur-sample != $last-sample) and (nth($samples, $cur-sample) <= $x) {
        $intv-start: $intv-start + (1 / $ig-cubic-bezier-sample-pool-size);
        $cur-sample: $cur-sample + 1;
    }
    $cur-sample: $cur-sample - 1;

    $dist:    ($x - nth($samples, $cur-sample)) / (nth($samples, $cur-sample + 1) - nth($samples, $cur-sample));
    $guess-t: $intv-start + $dist / $ig-cubic-bezier-sample-pool-size;

    $init-slope: ig-cubic-bezier-func-slope($x1, $x2, $guess-t);
    @if $init-slope >= $ig-cubic-bezier-newton-min-slope {
        @return ig-cubic-bezier-newton-raphson($x1, $x2, $x, $guess-t);
    } @else if $init-slope == 0 {
        @return $guess-t;
    } @else {
        @return ig-cubic-bezier-binary-subdivide($x1, $x2, $x, $intv-start, $intv-start + 1 / $ig-cubic-bezier-sample-pool-size);
    }
}

/// 
/// Sinusoidal easing function (in direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease($t) {
    @return ig-cubic-bezier(0.25, 0.1, 0.25, 1, $t);
}

/// 
/// Sinusoidal easing function (in direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-in($t) {
    @return  ig-cubic-bezier(0.42, 0, 1, 1, $t);
}

/// 
/// Sinusoidal easing function (out direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-out($t) {
    @return  ig-cubic-bezier(0, 0, 0.58, 1, $t);
}

/// 
/// Sinusoidal easing function (in-out direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-in-out($t) {
    @return  ig-cubic-bezier(0.42, 0, 0.58, 1, $t);
}

/// 
/// Sinusoidal easing function (in direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-in-sine($t) {
    @return  ig-cubic-bezier(0.47, 0, 0.745, 0.715, $t);
}

/// 
/// Sinusoidal easing function (out direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-out-sine($t) {
    @return  ig-cubic-bezier(0.39, 0.575, 0.565, 1, $t);
}

/// 
/// Sinusoidal easing function (in-out direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-in-out-sine($t) {
    @return  ig-cubic-bezier(0.445, 0.05, 0.55, 0.95, $t);
}

/// 
/// Quadratic easing function (in direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-in-quad($t) {
    @return  ig-cubic-bezier(0.55, 0.085, 0.68, 0.53, $t);
}

/// 
/// Quadratic easing function (out direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-out-quad($t) {
    @return  ig-cubic-bezier(0.25, 0.46, 0.45, 0.94, $t);
}

/// 
/// Quadratic easing function (in-out direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-in-out-quad($t) {
    @return  ig-cubic-bezier(0.455, 0.03, 0.515, 0.955, $t);
}

/// 
/// Cubic easing function (in direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-in-cubic($t) {
    @return  ig-cubic-bezier(0.55, 0.055, 0.675, 0.19, $t);
}

/// 
/// Cubic easing function (out direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-out-cubic($t) {
    @return  ig-cubic-bezier(0.215, 0.61, 0.355, 1, $t);
}

/// 
/// Cubic easing function (in-out direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-in-out-cubic($t) {
    @return  ig-cubic-bezier(0.645, 0.045, 0.355, 1, $t);
}

/// 
/// Quart easing function (in direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-in-quart($t) {
    @return  ig-cubic-bezier(0.895, 0.03, 0.685, 0.22, $t);
}

/// 
/// Quart easing function (out direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-out-quart($t) {
    @return  ig-cubic-bezier(0.165, 0.84, 0.44, 1, $t);
}

/// 
/// Quart easing function (in-out direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-in-out-quart($t) {
    @return  ig-cubic-bezier(0.77, 0, 0.175, 1, $t);
}

/// 
/// Quint easing function (in direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-in-quint($t) {
    @return  ig-cubic-bezier(0.755, 0.05, 0.855, 0.06, $t);
}

/// 
/// Quint easing function (out direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-out-quint($t) {
    @return  ig-cubic-bezier(0.23, 1, 0.32, 1, $t);
}

/// 
/// Quint easing function (in-out direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-in-out-quint($t) {
    @return  ig-cubic-bezier(0.86, 0, 0.07, 1, $t);
}

/// 
/// Exponential easing function (in direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-in-expo($t) {
    @return  ig-cubic-bezier(0.95, 0.05, 0.795, 0.035, $t);
}

/// 
/// Exponential easing function (out direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-out-expo($t) {
    @return  ig-cubic-bezier(0.19, 1, 0.22, 1, $t);
}

/// 
/// Exponential easing function (in-out direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-in-out-expo($t) {
    @return  ig-cubic-bezier(1, 0, 0, 1, $t);
}

/// 
/// Circular easing function (in direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-in-circ($t) {
    @return  ig-cubic-bezier(0.6, 0.04, 0.98, 0.335, $t);
}

/// 
/// Circular easing function (out direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-out-circ($t) {
    @return  ig-cubic-bezier(0.075, 0.82, 0.165, 1, $t);
}

/// 
/// Circular easing function (in-out direction).
///
/// @param {number} $t - Current time between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-ease-in-out-circ($t) {
    @return  ig-cubic-bezier(0.785, 0.135, 0.15, 0.86, $t);
}
