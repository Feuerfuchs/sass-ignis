////
/// Basic mathematical functions.
///
/// @group Math functions
///
/// @access public
////

/// 
/// Perform exponentiation. Only integer exponents are supported.
///
/// @param {number} $base
/// @param {number} $exp
///
/// @return {number}
///
/// @example scss - Exponentiation with a positive exponent
///   $result: ig-math-pow(3, 2); // The value of $result is 3^2 = 9
///
/// @example scss - Exponentiation with a negative exponent
///   $result: ig-math-pow(2, -3); // The value of $result is 1/(2^3) = 1/8
///
@function ig-math-pow($base, $exp) {
    $value: 1;

    @if $exp > 0 {
        @for $i from 1 through $exp {
            $value: $value * $base;
        }
    } @else if $exp < 0 {
        @for $i from 1 through -$exp {
            $value: $value / $base;
        }
    }

    @return $value;
}

///
/// Clamp a number between a minimum and maximum value.
///
/// @param {number} $value - Value to clamp
/// @param {number} $min   - Minimum value
/// @param {number} $max   - Maximum value
///
/// @return {number}
///
/// @example scss
///   $result: ig-math-clamp(20, 0, 10); // The value of $result is 10
///
/// @example scss
///   $result: ig-math-clamp(50, 20, 100); // The value of $result is 50
///
@function ig-math-clamp($value, $min, $max) {
    @if $value < $min {
        @return $min;
    }
    @if $value > $max {
        @return $max;
    }
    @return $value;
}

///
/// Linear interpolation from value $a to value $b.
///
/// @param {number} $a - First value
/// @param {number} $b - Second value
/// @param {number} $t - "Time" between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-lerp($a, $b, $t) {
    @return $a + ($b - $a) * $t;
}

///
/// Linear interpolation from point $a to point $b.
///
/// @param {list}   $a - First point
/// @param {list}   $b - Second point
/// @param {number} $t - "Time" between 0 and 1 inclusive
///
/// @return {list}
///
@function ig-lerp-2d($a, $b, $t) {
    @return ig-lerp(nth($a, 1), nth($b, 1), $t), ig-lerp(nth($a, 2), nth($b, 2), $t);
}

///
/// A generic bezier function accepting an arbitrary number of points.
///
/// @param {list}   $a - First point
/// @param {list}   $b - Second point
/// @param {number} $t - "Time" between 0 and 1 inclusive
///
/// @return {number}
///
@function ig-bezier($points, $t) {
    @while length($points) > 1 {
        $new-points: ();

        @for $i from 1 to length($points) {
            $new-points: append($new-points, ig-lerp-2d(nth($points, $i), nth($points, $i + 1), $t));
        }

        $points: $new-points;
    }

    @return nth($points, 1);
}
