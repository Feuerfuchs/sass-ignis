////
/// @group BEM
///
/// @access public
////

/// 
/// Create a new state rule.
///
/// @param {string} $state  - First state name
/// @param {list}   $states - List of more state names
///
/// @content
///
/// @example scss - Using single is-state
///   @include ig-bem-object('menu') {
///     display: none;
///     
///     @include ig-bem-state('is', open') {
///       display: block;
///     }
///   }
///   
///   // Generates:
///   
///   .o-menu {
///     display: none;
///   }
///   
///   .o-menu.is-open {
///     display: block;
///   }
///
/// @example scss - Using multiple is-states
///   @include ig-bem-object('menu') {
///     display: none;
///     
///     @include ig-bem-state('is', open', 'visible') {
///       display: block;
///     }
///   }
///   
///   // Generates:
///   
///   .o-menu {
///     display: none;
///   }
///   
///   .o-menu.is-open,
///   .o-menu.is-visible {
///     display: block;
///   }
///
@mixin ig-bem-state($prefix, $state, $states...) {
    $result:   ig-bem-state($prefix, $state, $states...);
    $selector: nth($result, 1);
    $context:  nth($result, 2);

    @include ig-bem-validate(
        'state',
        (prefix: $prefix, state: $state, states: $states),
        $selector,
        $context
    );

    @include ig-context-push($ig-bem-context-id, $context...);
    @at-root #{$selector} {
        @content;
    }
    @include ig-context-pop($ig-bem-context-id);
}

///
/// Generate a new state.
/// 
/// @return {list} A list with two items: 1. selector, 2. context or `null`
///
/// @see {mixin} ig-bem-has
///
@function ig-bem-state($prefix, $state, $states...) {
    $selector:   ();
    $parts-data: ();

    @each $state in join($state, $states) {
        $sel:        selector-parse('.#{$prefix}-#{$state}');
        @if & {
            $sel:    selector-append(&, $sel);
        }
        $selector:   join($selector, $sel, comma);
        $parts-data: append($parts-data, (
                'name':     $state,
                'selector': $sel
        ));
    }

    $context: 'state', (
        'parts':    $parts-data,
        'selector': $selector
    );

    @return $selector $context;
}

/// 
/// Create a new has-state modifier.
///
/// It's a shorthand for ig-bem-state('is', $state, $states...).
///
@mixin ig-bem-is($state, $states...) {
    @include ig-bem-state('is', $state, $states...) {
        @content;
    }
}

///
/// Generate a new is-state modifier. Check the respective mixin documentation for more information.
/// 
/// @return {list} A list with two items: 1. selector, 2. context or `null`
///
/// @see {mixin} ig-bem-is
///
@function ig-bem-is($state, $states...) {
    @return ig-bem-state('is', $state, $states...);
}

/// 
/// Create a new has-state modifier.
///
/// It's a shorthand for ig-bem-state('has', $state, $states...).
///
@mixin ig-bem-has($state, $states...) {
    @include ig-bem-state('has', $state, $states...) {
        @content;
    }
}

///
/// Generate a new has-state modifier. Check the respective mixin documentation for more information.
/// 
/// @return {list} A list with two items: 1. selector, 2. context or `null`
///
/// @see {mixin} ig-bem-has
///
@function ig-bem-has($state, $states...) {
    @return ig-bem-state('has', $state, $states...);
}
